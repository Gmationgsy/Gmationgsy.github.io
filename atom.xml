<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-29T13:43:03.823Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>oauth2 结合 jwt 实现认证的使用方法 系列（六）</title>
    <link href="http://example.com/2021/08/29/oauth2-jwt/"/>
    <id>http://example.com/2021/08/29/oauth2-jwt/</id>
    <published>2021-08-29T13:02:32.797Z</published>
    <updated>2021-08-29T13:43:03.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-JWT，全称是-Json-Web-Token-，-是一种-JSON-风格的轻量级的授权和身份认证规范，可实现无状态、分布式的-Web-应用授权："><a href="#1-JWT，全称是-Json-Web-Token-，-是一种-JSON-风格的轻量级的授权和身份认证规范，可实现无状态、分布式的-Web-应用授权：" class="headerlink" title="1.  JWT，全称是 Json Web Token ， 是一种 JSON 风格的轻量级的授权和身份认证规范，可实现无状态、分布式的 Web 应用授权："></a>1.  JWT，全称是 Json Web Token ， 是一种 JSON 风格的轻量级的授权和身份认证规范，可实现无状态、分布式的 Web 应用授权：</h3><h4 id="JWT-包含三个-部分"><a href="#JWT-包含三个-部分" class="headerlink" title="JWT  包含三个 部分"></a>JWT  包含三个 部分</h4><h4 id="1-Header：头部，通常头部有两部分信息：-声明类型-加密算法"><a href="#1-Header：头部，通常头部有两部分信息：-声明类型-加密算法" class="headerlink" title="1.Header：头部，通常头部有两部分信息： 声明类型  加密算法"></a>1.Header：头部，通常头部有两部分信息： 声明类型  加密算法</h4><h4 id="我们会对头部进行-Base64Url-编码（可解码）"><a href="#我们会对头部进行-Base64Url-编码（可解码）" class="headerlink" title="我们会对头部进行 Base64Url 编码（可解码）"></a>我们会对头部进行 Base64Url 编码（可解码）</h4><h4 id="2-Payload：载荷"><a href="#2-Payload：载荷" class="headerlink" title="2.Payload：载荷"></a>2.Payload：载荷</h4><ul><li><h5 id="iss-issuer-：表示签发人"><a href="#iss-issuer-：表示签发人" class="headerlink" title="iss (issuer)：表示签发人"></a>iss (issuer)：表示签发人</h5></li><li><h5 id="exp-expiration-time-：表示token过期时间"><a href="#exp-expiration-time-：表示token过期时间" class="headerlink" title="exp (expiration time)：表示token过期时间"></a>exp (expiration time)：表示token过期时间</h5></li><li><h5 id="sub-subject-：主题"><a href="#sub-subject-：主题" class="headerlink" title="sub (subject)：主题"></a>sub (subject)：主题</h5></li><li><h5 id="aud-audience-：受众"><a href="#aud-audience-：受众" class="headerlink" title="aud (audience)：受众"></a>aud (audience)：受众</h5></li><li><h5 id="nbf-Not-Before-：生效时间"><a href="#nbf-Not-Before-：生效时间" class="headerlink" title="nbf (Not Before)：生效时间"></a>nbf (Not Before)：生效时间</h5></li><li><h5 id="iat-Issued-At-：签发时间"><a href="#iat-Issued-At-：签发时间" class="headerlink" title="iat (Issued At)：签发时间"></a>iat (Issued At)：签发时间</h5></li><li><h5 id="jti-JWT-ID-：编号"><a href="#jti-JWT-ID-：编号" class="headerlink" title="jti (JWT ID)：编号"></a>jti (JWT ID)：编号</h5><h5 id="这部分也会采用-Base64Url-编码，得到第二部分数据。"><a href="#这部分也会采用-Base64Url-编码，得到第二部分数据。" class="headerlink" title="这部分也会采用 Base64Url 编码，得到第二部分数据。"></a>这部分也会采用 Base64Url 编码，得到第二部分数据。</h5></li></ul><h4 id="3-Signature：签名"><a href="#3-Signature：签名" class="headerlink" title="3.Signature：签名"></a>3.Signature：签名</h4><h5 id="Signature：签名，是整个数据的认证信息。一般根据前两步的数据，再加上服务的的密钥-secret（密钥保存在服务端，不能泄-露给客户端），通过-Header-中配置的加密算法生成。用于验证整个数据完整和可靠性。"><a href="#Signature：签名，是整个数据的认证信息。一般根据前两步的数据，再加上服务的的密钥-secret（密钥保存在服务端，不能泄-露给客户端），通过-Header-中配置的加密算法生成。用于验证整个数据完整和可靠性。" class="headerlink" title="Signature：签名，是整个数据的认证信息。一般根据前两步的数据，再加上服务的的密钥 secret（密钥保存在服务端，不能泄        露给客户端），通过 Header 中配置的加密算法生成。用于验证整个数据完整和可靠性。"></a>Signature：签名，是整个数据的认证信息。一般根据前两步的数据，再加上服务的的密钥 secret（密钥保存在服务端，不能泄        露给客户端），通过 Header 中配置的加密算法生成。用于验证整个数据完整和可靠性。</h5><p>例如： <strong>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzAyNDU1NjMsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiUk9MRV91c2VyIl0sImp0aSI6Ijk3ZWExZWJhLTVjM2QtNDA0Yi04YzM2LWU4YTdhNTNjMDQ2NiIsImNsaWVudF9pZCI6ImdzeSIsInNjb3BlIjpbImFsbCJdfQ.CLpfVVdX3y54S0DDZa14nQdhWkxVg2WEyWYPrJfr1oA</strong></p><p>这个就为 jwt 数据格式</p><h3 id="2-1-接下来-我们将-jwt-结合-oauth2-实现无状态登录"><a href="#2-1-接下来-我们将-jwt-结合-oauth2-实现无状态登录" class="headerlink" title="2-1 接下来 我们将 jwt 结合 oauth2 实现无状态登录"></a>2-1 接下来 我们将 jwt 结合 oauth2 实现无状态登录</h3><h4 id="2-2-我们修改-AuthorizationServer-类"><a href="#2-2-我们修改-AuthorizationServer-类" class="headerlink" title="2-2 我们修改  AuthorizationServer 类"></a>2-2 我们修改  AuthorizationServer 类</h4><ol><li><h5 id="提供-jwt-转换器"><a href="#提供-jwt-转换器" class="headerlink" title="提供  jwt 转换器"></a>提供  jwt 转换器</h5></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  提供  jwt 转换器 ,将 access_token转为 jwt形式</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function">JwtAccessTokenConverter <span class="title">jwtAccessTokenConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      JwtAccessTokenConverter converter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">      converter.setSigningKey(<span class="string">&quot;zidingyi&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> converter;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="2-修改之前-基于redis-实现，现在基于-jwt-实现，由于我们基于-jwt-服务端-直接解密使用，无需保存token"><a href="#2-修改之前-基于redis-实现，现在基于-jwt-实现，由于我们基于-jwt-服务端-直接解密使用，无需保存token" class="headerlink" title="2 . 修改之前 基于redis 实现，现在基于 jwt 实现，由于我们基于 jwt 服务端 直接解密使用，无需保存token"></a>2 . 修改之前 基于redis 实现，现在基于 jwt 实现，由于我们基于 jwt 服务端 直接解密使用，无需保存token</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  提供 access_token 实例</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function">TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 基于 Jwt，注入 jwtAccessTokenConverter</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenStore(jwtAccessTokenConverter());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><h5 id="存放JWT-token-的-过滤链-setTokenEnhancers-存入-过滤链-是有先后顺序的"><a href="#存放JWT-token-的-过滤链-setTokenEnhancers-存入-过滤链-是有先后顺序的" class="headerlink" title="//存放JWT   token 的 过滤链   setTokenEnhancers 存入 过滤链,是有先后顺序的"></a>//存放JWT   token 的 过滤链   setTokenEnhancers 存入 过滤链,是有先后顺序的</h5></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  提供 tokenServices 一些配置内容</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function">AuthorizationServerTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       DefaultTokenServices services = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">      <span class="comment">// services.setClientDetailsService(clientDetailsService);         //使用数据库的时候 不适用</span></span><br><span class="line">       services.setClientDetailsService(clientDetailsService());</span><br><span class="line">       services.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">       services.setTokenStore(tokenStore());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//存放JWT   token 的 过滤链   setTokenEnhancers 存入 过滤链,是有先后顺序的</span></span><br><span class="line">       TokenEnhancerChain tokenEnhancerChain = <span class="keyword">new</span> TokenEnhancerChain();</span><br><span class="line">       tokenEnhancerChain.setTokenEnhancers(Arrays.asList(jwtAccessTokenConverter()));</span><br><span class="line">       services.setTokenEnhancer(tokenEnhancerChain);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> services;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="4-AuthorizationServer-类的完整配置-为："><a href="#4-AuthorizationServer-类的完整配置-为：" class="headerlink" title="4 .AuthorizationServer  类的完整配置 为："></a>4 .AuthorizationServer  类的完整配置 为：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密的类  springSecurity提供</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 redisConnectionFactory 的连接bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供  jwt 转换器 ,将 access_token转为 jwt形式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JwtAccessTokenConverter <span class="title">jwtAccessTokenConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JwtAccessTokenConverter converter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        converter.setSigningKey(<span class="string">&quot;zidingyi&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 access_token 实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//基于内存</span></span><br><span class="line">       <span class="comment">// return new InMemoryTokenStore();</span></span><br><span class="line">        <span class="comment">//基于redis</span></span><br><span class="line">       <span class="comment">// return  new RedisTokenStore(redisConnectionFactory);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于 Jwt，注入 jwtAccessTokenConverter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenStore(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当连接数据库的时候 ,不使用默认的 clientDetailsService  注释掉</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    ClientDetailsService clientDetailsService;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 注入 dataSource ,连接数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 clientDetailsService ，注入 JdbcClientDetailsService 连接数据库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ClientDetailsService <span class="title">clientDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcClientDetailsService(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供  clients</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        clients.inMemory()</span></span><br><span class="line"><span class="comment">//                .withClient(&quot;gsy&quot;)//配置client_id</span></span><br><span class="line"><span class="comment">//                .secret(passwordEncoder.encode(&quot;gsy123456&quot;))//配置client_secret</span></span><br><span class="line"><span class="comment">//                .accessTokenValiditySeconds(7200)//配置访问token的有效期</span></span><br><span class="line"><span class="comment">//                .refreshTokenValiditySeconds(25600)//配置刷新token的有效期</span></span><br><span class="line"><span class="comment">//                .redirectUris(&quot;http://www.baidu.com&quot;)//配置redirect_uri，用于授权成功后跳转</span></span><br><span class="line"><span class="comment">//                .scopes(&quot;all&quot;)//配置申请的权限范围</span></span><br><span class="line"><span class="comment">//                .autoApprove(true)  //自动批准</span></span><br><span class="line"><span class="comment">//                //authorization_code 授权码模式   //password 密码模式   //refresh_token 刷新token</span></span><br><span class="line"><span class="comment">//                .authorizedGrantTypes(&quot;authorization_code&quot;,&quot;password&quot;,&quot;refresh_token&quot;);//配置grant_type，表示授权类型</span></span><br><span class="line">        clients.withClientDetails(clientDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  添加  取消  checkTokenAccess拦截</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        security.checkTokenAccess(<span class="string">&quot;permitAll()&quot;</span>)</span><br><span class="line">                .allowFormAuthenticationForClients();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 tokenServices 一些配置内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">AuthorizationServerTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultTokenServices services = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">       <span class="comment">// services.setClientDetailsService(clientDetailsService);         //使用数据库的时候 不适用</span></span><br><span class="line">        services.setClientDetailsService(clientDetailsService());</span><br><span class="line">        services.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">        services.setTokenStore(tokenStore());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//存放JWT   token 的 过滤链   setTokenEnhancers 存入 过滤链,是有先后顺序的</span></span><br><span class="line">        TokenEnhancerChain tokenEnhancerChain = <span class="keyword">new</span> TokenEnhancerChain();</span><br><span class="line">        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(jwtAccessTokenConverter()));</span><br><span class="line">        services.setTokenEnhancer(tokenEnhancerChain);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 认证管理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用密码模式需要配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">        endpoints</span><br><span class="line">                .authenticationManager(authenticationManager)</span><br><span class="line">                .tokenServices(tokenServices());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-3-之后我们开始测试-，测试方法和-系列教程-五-一样"><a href="#2-3-之后我们开始测试-，测试方法和-系列教程-五-一样" class="headerlink" title="2-3 之后我们开始测试 ，测试方法和  系列教程 (五) 一样"></a>2-3 之后我们开始测试 ，测试方法和  系列教程 (五) 一样</h4><p><img src="/2021/08/29/oauth2-jwt/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210829212216.png"></p><p><strong>access_token 所展示的就是 jwt内容</strong> ，然后拿着 **access_token 去访问资源服务就可以了 </p><h4 id="2-4-如果我们想要自定义-jwt的显示-怎么办"><a href="#2-4-如果我们想要自定义-jwt的显示-怎么办" class="headerlink" title="2-4 如果我们想要自定义 jwt的显示 怎么办"></a>2-4 如果我们想要自定义 jwt的显示 怎么办</h4><h5 id="1-添加-CustomAdditionalInformation-类-info-中-可以自己定义先要展示德内容"><a href="#1-添加-CustomAdditionalInformation-类-info-中-可以自己定义先要展示德内容" class="headerlink" title="1.添加 CustomAdditionalInformation 类   info 中 可以自己定义先要展示德内容"></a>1.添加 CustomAdditionalInformation 类   info 中 可以自己定义先要展示德内容</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAdditionalInformation</span> <span class="keyword">implements</span> <span class="title">TokenEnhancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">enhance</span><span class="params">(OAuth2AccessToken accessToken, OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; info = accessToken.getAdditionalInformation();</span><br><span class="line">        info.put(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;gsy&quot;</span>);</span><br><span class="line">        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(info);</span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-。然后-将-改-CustomAdditionalInformation-放到-tokenServices-的-tokenEnhancerChain里面"><a href="#2-。然后-将-改-CustomAdditionalInformation-放到-tokenServices-的-tokenEnhancerChain里面" class="headerlink" title="2 。然后 将 改 CustomAdditionalInformation 放到   tokenServices 的 tokenEnhancerChain里面"></a>2 。然后 将 改 CustomAdditionalInformation 放到   tokenServices 的 tokenEnhancerChain里面</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">CustomAdditionalInformation customAdditionalInformation;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  提供 tokenServices 一些配置内容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">AuthorizationServerTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultTokenServices services = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">   <span class="comment">// services.setClientDetailsService(clientDetailsService);         //使用数据库的时候 不适用</span></span><br><span class="line">    services.setClientDetailsService(clientDetailsService());</span><br><span class="line">    services.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">    services.setTokenStore(tokenStore());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//存放JWT   token 的 过滤链   setTokenEnhancers 存入 过滤链,是有先后顺序的</span></span><br><span class="line">    TokenEnhancerChain tokenEnhancerChain = <span class="keyword">new</span> TokenEnhancerChain();</span><br><span class="line">    tokenEnhancerChain.setTokenEnhancers(Arrays.asList(jwtAccessTokenConverter(),customAdditionalInformation));</span><br><span class="line">    services.setTokenEnhancer(tokenEnhancerChain);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> services;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="到此我们完成了-oauth2-结合-jwt-的实现"><a href="#到此我们完成了-oauth2-结合-jwt-的实现" class="headerlink" title="到此我们完成了   oauth2 结合 jwt 的实现"></a>到此我们完成了   oauth2 结合 jwt 的实现</h3><hr><h2 id="oauth2-相关笔记-：-gitee-地址-：https-gitee-com-guo-shangyu-learning"><a href="#oauth2-相关笔记-：-gitee-地址-：https-gitee-com-guo-shangyu-learning" class="headerlink" title="oauth2 相关笔记  ： gitee 地址 ：https://gitee.com/guo-shangyu/learning"></a>oauth2 相关笔记  ： gitee 地址 ：<strong><a href="https://gitee.com/guo-shangyu/learning">https://gitee.com/guo-shangyu/learning</a></strong></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-JWT，全称是-Json-Web-Token-，-是一种-JSON-风格的轻量级的授权和身份认证规范，可实现无状态、分布式的-Web-应用授权：&quot;&gt;&lt;a href=&quot;#1-JWT，全称是-Json-Web-Token-，-是一种-JSON-风格的轻量级的授权和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>oauth2使用方法 之将Client 定义数据存入数据库（五）</title>
    <link href="http://example.com/2021/08/26/aouth2-datasouce/"/>
    <id>http://example.com/2021/08/26/aouth2-datasouce/</id>
    <published>2021-08-26T13:40:03.389Z</published>
    <updated>2021-08-26T15:32:31.049Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-之前我们定义的数据都是在-代码中写死的数据"><a href="#1-之前我们定义的数据都是在-代码中写死的数据" class="headerlink" title="1. 之前我们定义的数据都是在 代码中写死的数据"></a>1. 之前我们定义的数据都是在 代码中写死的数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      clients.inMemory()</span><br><span class="line">              .withClient(<span class="string">&quot;gsy&quot;</span>)<span class="comment">//配置client_id</span></span><br><span class="line">              .secret(passwordEncoder.encode(<span class="string">&quot;gsy123456&quot;</span>))<span class="comment">//配置client_secret</span></span><br><span class="line">              .accessTokenValiditySeconds(<span class="number">7200</span>)<span class="comment">//配置访问token的有效期</span></span><br><span class="line">              .refreshTokenValiditySeconds(<span class="number">25600</span>)<span class="comment">//配置刷新token的有效期</span></span><br><span class="line">              .redirectUris(<span class="string">&quot;http://www.baidu.com&quot;</span>)<span class="comment">//配置redirect_uri，用于授权成功后跳转</span></span><br><span class="line">              .scopes(<span class="string">&quot;all&quot;</span>)<span class="comment">//配置申请的权限范围</span></span><br><span class="line">              .autoApprove(<span class="keyword">true</span>)  <span class="comment">//自动批准</span></span><br><span class="line">              <span class="comment">//authorization_code 授权码模式   //password 密码模式   //refresh_token 刷新token</span></span><br><span class="line">              .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>,<span class="string">&quot;password&quot;</span>,<span class="string">&quot;refresh_token&quot;</span>);<span class="comment">//配置grant_type，表示授权类型</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="代码写的数据-用起来不灵活-，我们数据存入到数据库里面，然后通过访问数据库-查询是否有权限访问"><a href="#代码写的数据-用起来不灵活-，我们数据存入到数据库里面，然后通过访问数据库-查询是否有权限访问" class="headerlink" title="代码写的数据 用起来不灵活 ，我们数据存入到数据库里面，然后通过访问数据库 查询是否有权限访问"></a>代码写的数据 用起来不灵活 ，我们数据存入到数据库里面，然后通过访问数据库 查询是否有权限访问</h3><h2 id="2-第一步-我们需要-创建数据库的-sql"><a href="#2-第一步-我们需要-创建数据库的-sql" class="headerlink" title="2 .第一步 我们需要 创建数据库的 sql"></a>2 .第一步 我们需要 创建数据库的 sql</h2><p><strong>表名 不要修改 : oauth_client_details</strong>   </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for oauth_client_details</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `oauth_client_details`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `oauth_client_details` (</span><br><span class="line">  `client_id` <span class="type">varchar</span>(<span class="number">48</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `resource_ids` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `client_secret` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="keyword">scope</span>` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `authorized_grant_types` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `web_server_redirect_uri` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `authorities` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `access_token_validity` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `refresh_token_validity` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `additional_information` <span class="type">varchar</span>(<span class="number">4096</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `autoapprove` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`client_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of oauth_client_details</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `oauth_client_details` <span class="keyword">VALUES</span> (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;$2a$10$obftXrS1Q3paV1uBXrnfEu36n.oQKIwQyJ2i9Q0Qu.A5T1eqSG83i&#x27;</span>, <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;authorization_code,refresh_token,implicit,password&#x27;</span>, <span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;3600&#x27;</span>, <span class="string">&#x27;259200&#x27;</span>, <span class="string">&#x27;&#123;\&quot;country\&quot;:\&quot;CN\&quot;,\&quot;country_code\&quot;:\&quot;086\&quot;&#125;&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `oauth_client_details` <span class="keyword">VALUES</span> (<span class="string">&#x27;client-app&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;$2a$10$aIZKoRptgtu819WQPh0QaOJMlc8XtHsOqgx3W3/1/3Hw5taV7cX8y&#x27;</span>, <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;authorization_code,refresh_token,implicit,password&#x27;</span>, <span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;3600&#x27;</span>, <span class="string">&#x27;259200&#x27;</span>, <span class="string">&#x27;&#123;\&quot;country\&quot;:\&quot;CN\&quot;,\&quot;country_code\&quot;:\&quot;086\&quot;&#125;&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `oauth_client_details` <span class="keyword">VALUES</span> (<span class="string">&#x27;gsy&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;$2a$10$lp9XsReO4oOl1Uwp6g4g/uROkNm56drXxELd6986xmsCjuz1bkAg6&#x27;</span>, <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;authorization_code,refresh_token,implicit,password&#x27;</span>, <span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;3600&#x27;</span>, <span class="string">&#x27;259200&#x27;</span>, <span class="string">&#x27;&#123;\&quot;country\&quot;:\&quot;CN\&quot;,\&quot;country_code\&quot;:\&quot;086\&quot;&#125;&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-1-创建数据库名字-oauth（可以自己取名字）"><a href="#2-1-创建数据库名字-oauth（可以自己取名字）" class="headerlink" title="2-1  创建数据库名字   oauth（可以自己取名字）"></a>2-1  创建数据库名字   oauth（可以自己取名字）</h3><p>pom文件中 添加  mysql 驱动 ，以及  jdbc 的依赖  —-   oauth 源码走了  jdbc 连接数据，获取认证</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    jdbc   --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--    mysql-connector-java   --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-修改-AuthorizationServer-类"><a href="#2-2-修改-AuthorizationServer-类" class="headerlink" title="2-2    修改  AuthorizationServer 类"></a>2-2    修改  AuthorizationServer 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">      </span><br><span class="line"> <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 当连接数据库的时候 ,不使用默认的 clientDetailsService 注释掉 clientDetailsService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    ClientDetailsService clientDetailsService;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 clientDetailsService ，注入 JdbcClientDetailsService 连接数据库</span></span><br><span class="line"><span class="comment">     *  注释掉</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ClientDetailsService <span class="title">clientDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcClientDetailsService(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//添加 dataSource实例</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 注入 dataSource ,连接数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改 services.setClientDetailsService  使用新的 clientDetailsService()</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">AuthorizationServerTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultTokenServices services = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">       <span class="comment">// services.setClientDetailsService(clientDetailsService);         //使用数据库的时候 不适用</span></span><br><span class="line">        services.setClientDetailsService(clientDetailsService());</span><br><span class="line">        services.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">        services.setTokenStore(tokenStore());</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//修改</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        clients.inMemory()</span></span><br><span class="line"><span class="comment">//                .withClient(&quot;gsy&quot;)//配置client_id</span></span><br><span class="line"><span class="comment">//                .secret(passwordEncoder.encode(&quot;gsy123456&quot;))//配置client_secret</span></span><br><span class="line"><span class="comment">//                .accessTokenValiditySeconds(7200)//配置访问token的有效期</span></span><br><span class="line"><span class="comment">//                .refreshTokenValiditySeconds(25600)//配置刷新token的有效期</span></span><br><span class="line"><span class="comment">//                .redirectUris(&quot;http://www.baidu.com&quot;)//配置redirect_uri，用于授权成功后跳转</span></span><br><span class="line"><span class="comment">//                .scopes(&quot;all&quot;)//配置申请的权限范围</span></span><br><span class="line"><span class="comment">//                .autoApprove(true)  //自动批准</span></span><br><span class="line"><span class="comment">//                //authorization_code 授权码模式   //password 密码模式   //refresh_token 刷新token</span></span><br><span class="line"><span class="comment">//                .authorizedGrantTypes(&quot;authorization_code&quot;,&quot;password&quot;,&quot;refresh_token&quot;);//配置grant_type，表示授权类型</span></span><br><span class="line"></span><br><span class="line">        clients.withClientDetails(clientDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加  取消  checkTokenAccess拦截 </span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        security.checkTokenAccess(<span class="string">&quot;permitAll()&quot;</span>)</span><br><span class="line">                .allowFormAuthenticationForClients();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3此时-整个-AuthorizationServer-类为"><a href="#2-3此时-整个-AuthorizationServer-类为" class="headerlink" title="2-3此时 整个  AuthorizationServer 类为"></a>2-3此时 整个  AuthorizationServer 类为</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密的类  springSecurity提供</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 redisConnectionFactory 的连接bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 access_token 实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// return new InMemoryTokenStore();</span></span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> RedisTokenStore(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当连接数据库的时候 ,不使用默认的 clientDetailsService  注释掉</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    ClientDetailsService clientDetailsService;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 注入 dataSource ,连接数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 clientDetailsService ，注入 JdbcClientDetailsService 连接数据库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ClientDetailsService <span class="title">clientDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcClientDetailsService(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供  clients</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        clients.inMemory()</span></span><br><span class="line"><span class="comment">//                .withClient(&quot;gsy&quot;)//配置client_id</span></span><br><span class="line"><span class="comment">//                .secret(passwordEncoder.encode(&quot;gsy123456&quot;))//配置client_secret</span></span><br><span class="line"><span class="comment">//                .accessTokenValiditySeconds(7200)//配置访问token的有效期</span></span><br><span class="line"><span class="comment">//                .refreshTokenValiditySeconds(25600)//配置刷新token的有效期</span></span><br><span class="line"><span class="comment">//                .redirectUris(&quot;http://www.baidu.com&quot;)//配置redirect_uri，用于授权成功后跳转</span></span><br><span class="line"><span class="comment">//                .scopes(&quot;all&quot;)//配置申请的权限范围</span></span><br><span class="line"><span class="comment">//                .autoApprove(true)  //自动批准</span></span><br><span class="line"><span class="comment">//                //authorization_code 授权码模式   //password 密码模式   //refresh_token 刷新token</span></span><br><span class="line"><span class="comment">//                .authorizedGrantTypes(&quot;authorization_code&quot;,&quot;password&quot;,&quot;refresh_token&quot;);//配置grant_type，表示授权类型</span></span><br><span class="line">        </span><br><span class="line">        clients.withClientDetails(clientDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  添加  取消  checkTokenAccess拦截 </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        security.checkTokenAccess(<span class="string">&quot;permitAll()&quot;</span>)</span><br><span class="line">                .allowFormAuthenticationForClients();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 tokenServices 一些配置内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">AuthorizationServerTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultTokenServices services = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">       <span class="comment">// services.setClientDetailsService(clientDetailsService);         //使用数据库的时候 不适用</span></span><br><span class="line">        services.setClientDetailsService(clientDetailsService());</span><br><span class="line">        services.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">        services.setTokenStore(tokenStore());</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  提供 认证管理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用密码模式需要配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">        endpoints</span><br><span class="line">                .authenticationManager(authenticationManager)</span><br><span class="line">                .tokenServices(tokenServices());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改 添加数据库配置   application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///aouth?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br></pre></td></tr></table></figure><h3 id="2-4此时-我们的访问方式-发生的变化"><a href="#2-4此时-我们的访问方式-发生的变化" class="headerlink" title="2-4此时 我们的访问方式 发生的变化"></a>2-4此时 我们的访问方式 发生的变化</h3><p><strong>添加  client_secret 参数 ，此时参数配置 都在数据表里面  client_secret  为加密参数 123     此时 Authorization里面 可以没有参数</strong></p><p>加密方法 ：  client_secret     123 加密 后  $2a$10$lp9XsReO4oOl1Uwp6g4g/uROkNm56drXxELd6986xmsCjuz1bkAg6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new BCryptPasswordEncoder().encode(&quot;123&quot;);</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/aouth2-datasouce/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210826231112.png"></p><p>接口请求还是一样的</p><p><img src="/2021/08/26/aouth2-datasouce/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210826232745.png"></p><p><img src="/2021/08/26/aouth2-datasouce/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210826231316.png"></p><h4 id="数据-请求-postman-文件：-项目源码-，-次章节-为第五节-主分支上有所有代码源码-前四节-在-oauth2-page1-4-分支上"><a href="#数据-请求-postman-文件：-项目源码-，-次章节-为第五节-主分支上有所有代码源码-前四节-在-oauth2-page1-4-分支上" class="headerlink" title="数据 请求   postman  文件：   项目源码 ， 次章节 为第五节  主分支上有所有代码源码       前四节 在  oauth2-page1-4 分支上"></a><strong>数据 请求   postman  文件：   项目源码 ， 次章节 为第五节  主分支上有所有代码源码       前四节 在  oauth2-page1-4 分支上</strong></h4><hr><h2 id="项目源码-：-gitee-地址-：https-gitee-com-guo-shangyu-learning"><a href="#项目源码-：-gitee-地址-：https-gitee-com-guo-shangyu-learning" class="headerlink" title="项目源码      ： gitee 地址 ：https://gitee.com/guo-shangyu/learning"></a>项目源码      ： gitee 地址 ：<strong><a href="https://gitee.com/guo-shangyu/learning">https://gitee.com/guo-shangyu/learning</a></strong></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-之前我们定义的数据都是在-代码中写死的数据&quot;&gt;&lt;a href=&quot;#1-之前我们定义的数据都是在-代码中写死的数据&quot; class=&quot;headerlink&quot; title=&quot;1. 之前我们定义的数据都是在 代码中写死的数据&quot;&gt;&lt;/a&gt;1. 之前我们定义的数据都是在 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring Security 结合 oauth2的基本使用方法（四）</title>
    <link href="http://example.com/2021/08/25/aouth2-pass-token-redis/"/>
    <id>http://example.com/2021/08/25/aouth2-pass-token-redis/</id>
    <published>2021-08-25T13:56:43.346Z</published>
    <updated>2021-08-25T14:20:35.560Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前面我们说了-如何去刷新-token-的值，现在我们讲一下-token的-存储位置，之前我们是吧token的值存储在-内存里面，现在-我们把-token存入-redis-里面。"><a href="#1-前面我们说了-如何去刷新-token-的值，现在我们讲一下-token的-存储位置，之前我们是吧token的值存储在-内存里面，现在-我们把-token存入-redis-里面。" class="headerlink" title="1.前面我们说了 如何去刷新 token 的值，现在我们讲一下 token的 存储位置，之前我们是吧token的值存储在 内存里面，现在 我们把 token存入 redis 里面。"></a>1.前面我们说了 如何去刷新 token 的值，现在我们讲一下 token的 存储位置，之前我们是吧token的值存储在 内存里面，现在 我们把 token存入 redis 里面。</h3><h3 id="1-1-首先-pom文件-添加-redis-依赖"><a href="#1-1-首先-pom文件-添加-redis-依赖" class="headerlink" title="1-1 首先 pom文件 添加 redis 依赖"></a>1-1 首先 pom文件 添加 redis 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        配置redis，将access_token存入redis--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="我们修改-AuthorizationServer-类"><a href="#我们修改-AuthorizationServer-类" class="headerlink" title="我们修改  AuthorizationServer 类"></a>我们修改  AuthorizationServer 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  提供 redisConnectionFactory 的连接bean</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"> <span class="function">TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//将原有的基于内存 变为 基于redis</span></span><br><span class="line">    <span class="comment">// return new InMemoryTokenStore(); </span></span><br><span class="line">       <span class="keyword">return</span>  <span class="keyword">new</span> RedisTokenStore(redisConnectionFactory);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yml-文件中配置-redis-连接-方式-，前提是本地启动了-redis"><a href="#yml-文件中配置-redis-连接-方式-，前提是本地启动了-redis" class="headerlink" title="yml 文件中配置   redis 连接 方式 ，前提是本地启动了 redis"></a>yml 文件中配置   redis 连接 方式 ，前提是本地启动了 redis</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h3 id="2-然后我们启动项目-，开始按照之前的请求方式访问-http-localhost-9001-oauth-token-，你会发现-，你的-token-值存储在了-redis-里面-，并且过期时间-也是你设置的-7200-秒-，刷新token-时间为-25600秒-。"><a href="#2-然后我们启动项目-，开始按照之前的请求方式访问-http-localhost-9001-oauth-token-，你会发现-，你的-token-值存储在了-redis-里面-，并且过期时间-也是你设置的-7200-秒-，刷新token-时间为-25600秒-。" class="headerlink" title="2.然后我们启动项目 ，开始按照之前的请求方式访问  http://localhost:9001/oauth/token  ，你会发现 ，你的 token 值存储在了 redis 里面 ，并且过期时间 也是你设置的  7200 秒  ，刷新token 时间为 25600秒 。"></a>2.然后我们启动项目 ，开始按照之前的请求方式访问  <a href="http://localhost:9001/oauth/token">http://localhost:9001/oauth/token</a>  ，你会发现 ，你的 token 值存储在了 redis 里面 ，并且过期时间 也是你设置的  7200 秒  ，刷新token 时间为 25600秒 。</h3><hr><h2 id="oauth2-相关笔记-：-gitee-地址-：https-gitee-com-guo-shangyu-learning"><a href="#oauth2-相关笔记-：-gitee-地址-：https-gitee-com-guo-shangyu-learning" class="headerlink" title="oauth2 相关笔记  ： gitee 地址 ：https://gitee.com/guo-shangyu/learning"></a>oauth2 相关笔记  ： gitee 地址 ：<strong><a href="https://gitee.com/guo-shangyu/learning">https://gitee.com/guo-shangyu/learning</a></strong></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-前面我们说了-如何去刷新-token-的值，现在我们讲一下-token的-存储位置，之前我们是吧token的值存储在-内存里面，现在-我们把-token存入-redis-里面。&quot;&gt;&lt;a href=&quot;#1-前面我们说了-如何去刷新-token-的值，现在我们讲一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring Security 结合 oauth2的基本使用方法（三）</title>
    <link href="http://example.com/2021/08/15/aouth2-pass-refresh_token/"/>
    <id>http://example.com/2021/08/15/aouth2-pass-refresh_token/</id>
    <published>2021-08-15T05:29:03.721Z</published>
    <updated>2021-08-25T14:20:28.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前一章-我们介绍了密码模式的登录形式-：接下来我们介绍一下-refresh-token问题"><a href="#1-前一章-我们介绍了密码模式的登录形式-：接下来我们介绍一下-refresh-token问题" class="headerlink" title="1.前一章 我们介绍了密码模式的登录形式 ：接下来我们介绍一下 refresh_token问题"></a>1.前一章 我们介绍了密码模式的登录形式 ：接下来我们介绍一下 refresh_token问题</h2><h3 id="如果要支持-refresh-token"><a href="#如果要支持-refresh-token" class="headerlink" title="如果要支持 refresh_token"></a>如果要支持 refresh_token</h3><ol><li><h4 id="AuthorizationServer-类中配置-配置-tokenStore-的实列"><a href="#AuthorizationServer-类中配置-配置-tokenStore-的实列" class="headerlink" title="AuthorizationServer 类中配置   配置 tokenStore 的实列"></a>AuthorizationServer 类中配置   配置 tokenStore 的实列</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function">TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> InMemoryTokenStore();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><h4 id="注入-ClientDetailsService"><a href="#注入-ClientDetailsService" class="headerlink" title="注入 ClientDetailsService"></a>注入 ClientDetailsService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   ClientDetailsService clientDetailsService;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><h4 id="配置-tokenServices-实例"><a href="#配置-tokenServices-实例" class="headerlink" title="配置 tokenServices 实例"></a>配置 tokenServices 实例</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function">AuthorizationServerTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       DefaultTokenServices services = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">       <span class="comment">//注入客户端</span></span><br><span class="line">       services.setClientDetailsService(clientDetailsService);</span><br><span class="line">       <span class="comment">//支持token刷新</span></span><br><span class="line">       services.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//注入 tokenStore</span></span><br><span class="line">       services.setTokenStore(tokenStore);</span><br><span class="line">       <span class="keyword">return</span> services;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><h4 id="注入-tokenServices"><a href="#注入-tokenServices" class="headerlink" title="注入 tokenServices"></a>注入 tokenServices</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用密码模式需要配置  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">       endpoints</span><br><span class="line">               .authenticationManager(authenticationManager)</span><br><span class="line">               .tokenServices(tokenServices());  <span class="comment">//注入 tokenServices实例</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="修改-后的-AuthorizationServer-的整个-代码为"><a href="#修改-后的-AuthorizationServer-的整个-代码为" class="headerlink" title="修改 后的  AuthorizationServer  的整个 代码为"></a>修改 后的  AuthorizationServer  的整个 代码为</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密的类  springSecurity提供</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InMemoryTokenStore();   <span class="comment">//选择基于内存的方式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ClientDetailsService clientDetailsService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">AuthorizationServerTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultTokenServices services = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">        <span class="comment">//注入客户端</span></span><br><span class="line">        services.setClientDetailsService(clientDetailsService);</span><br><span class="line">        <span class="comment">//支持token刷新</span></span><br><span class="line">        services.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">         <span class="comment">//注入 tokenStore</span></span><br><span class="line">        services.setTokenStore(tokenStore);</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用密码模式需要配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">        endpoints</span><br><span class="line">                .authenticationManager(authenticationManager)</span><br><span class="line">                .tokenServices(tokenServices());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                .withClient(<span class="string">&quot;gsy&quot;</span>)<span class="comment">//配置client_id</span></span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;gsy123456&quot;</span>))<span class="comment">//配置client_secret</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">7200</span>)<span class="comment">//配置访问token的有效期</span></span><br><span class="line">                .refreshTokenValiditySeconds(<span class="number">25600</span>)<span class="comment">//配置刷新token的有效期</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.baidu.com&quot;</span>)<span class="comment">//配置redirect_uri，用于授权成功后跳转</span></span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)<span class="comment">//配置申请的权限范围</span></span><br><span class="line">                .autoApprove(<span class="keyword">true</span>)  <span class="comment">//自动批准</span></span><br><span class="line">                <span class="comment">//authorization_code 授权码模式   //password 密码模式   //refresh_token 刷新token</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>,<span class="string">&quot;password&quot;</span>,<span class="string">&quot;refresh_token&quot;</span>);<span class="comment">//配置grant_type，表示授权类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="至此-，该工程将支持-refresh-token-模式-刷新token-之后-，原有的token-会将失效"><a href="#至此-，该工程将支持-refresh-token-模式-刷新token-之后-，原有的token-会将失效" class="headerlink" title="至此 ，该工程将支持  refresh_token 模式, 刷新token 之后 ，原有的token 会将失效"></a>至此 ，该工程将支持  refresh_token 模式, 刷新token 之后 ，原有的token 会将失效</h3><p><img src="/2021/08/15/aouth2-pass-refresh_token/img_20210824232200.png"></p><p>首先 获取  refresh_token  的值，然后将值带入 如下</p><p><img src="/2021/08/15/aouth2-pass-refresh_token/img_20210824232232.png"></p><p>可以看见  获取到 新的  access_token  ，至此完成 刷新token的操作 ，开始访问 ，可以看见 访问结果 使用 Authorization 模式访问 </p><p><img src="/2021/08/15/aouth2-pass-refresh_token/img_20210824232558.png"></p><hr><h2 id="oauth2-相关笔记-：-gitee-地址-：https-gitee-com-guo-shangyu-learning"><a href="#oauth2-相关笔记-：-gitee-地址-：https-gitee-com-guo-shangyu-learning" class="headerlink" title="oauth2 相关笔记  ： gitee 地址 ：https://gitee.com/guo-shangyu/learning"></a>oauth2 相关笔记  ： gitee 地址 ：<strong><a href="https://gitee.com/guo-shangyu/learning">https://gitee.com/guo-shangyu/learning</a></strong></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前一章-我们介绍了密码模式的登录形式-：接下来我们介绍一下-refresh-token问题&quot;&gt;&lt;a href=&quot;#1-前一章-我们介绍了密码模式的登录形式-：接下来我们介绍一下-refresh-token问题&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring Security 结合 oauth2的基本使用方法（二）</title>
    <link href="http://example.com/2021/06/01/aouth2-pass/"/>
    <id>http://example.com/2021/06/01/aouth2-pass/</id>
    <published>2021-06-01T13:44:33.396Z</published>
    <updated>2021-08-25T14:20:12.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前一章中我门介绍了-oauth2-的授权的码的登录模式，现在我们来介绍一下-（密码模式）"><a href="#1-前一章中我门介绍了-oauth2-的授权的码的登录模式，现在我们来介绍一下-（密码模式）" class="headerlink" title="1.前一章中我门介绍了 oauth2 的授权的码的登录模式，现在我们来介绍一下         （密码模式）"></a>1.前一章中我门介绍了 oauth2 的授权的码的登录模式，现在我们来介绍一下         （密码模式）</h2><h3 id="我会在前一篇文章所搭建的基础上做出修改"><a href="#我会在前一篇文章所搭建的基础上做出修改" class="headerlink" title="我会在前一篇文章所搭建的基础上做出修改"></a>我会在前一篇文章所搭建的基础上做出修改</h3><h3 id="1-在授权服务器（AuthorizationServer）加上-authorizedGrantTypes后面配置上-password模式即可"><a href="#1-在授权服务器（AuthorizationServer）加上-authorizedGrantTypes后面配置上-password模式即可" class="headerlink" title="1.在授权服务器（AuthorizationServer）加上   authorizedGrantTypes后面配置上   password模式即可"></a>1.在授权服务器（AuthorizationServer）加上   authorizedGrantTypes后面配置上   password模式即可</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> AuthenticationManager authenticationManager;   <span class="comment">// 提前需要在 securityconfig里面注入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">      endpoints.authenticationManager(authenticationManager);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      clients.inMemory()</span><br><span class="line">              .withClient(<span class="string">&quot;gsy&quot;</span>)<span class="comment">//配置client_id</span></span><br><span class="line">              .secret(passwordEncoder.encode(<span class="string">&quot;gsy123456&quot;</span>))<span class="comment">//配置client_secret</span></span><br><span class="line">              .accessTokenValiditySeconds(<span class="number">7200</span>)<span class="comment">//配置访问token的有效期</span></span><br><span class="line">              .refreshTokenValiditySeconds(<span class="number">25600</span>)<span class="comment">//配置刷新token的有效期</span></span><br><span class="line">              .redirectUris(<span class="string">&quot;http://www.baidu.com&quot;</span>)<span class="comment">//配置redirect_uri，用于授权成功后跳转</span></span><br><span class="line">              .scopes(<span class="string">&quot;all&quot;</span>)<span class="comment">//配置申请的权限范围</span></span><br><span class="line">              .autoApprove(<span class="keyword">true</span>)  <span class="comment">//自动批准</span></span><br><span class="line">              .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>,<span class="string">&quot;password&quot;</span>);<span class="comment">//配置grant_type，表示授权类型</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="2-WebSecurityConfig配置中添加-AuthenticationManager-的实例"><a href="#2-WebSecurityConfig配置中添加-AuthenticationManager-的实例" class="headerlink" title="2.WebSecurityConfig配置中添加 AuthenticationManager 的实例"></a>2.WebSecurityConfig配置中添加 AuthenticationManager 的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="此时-将同时支持授权码模式和密码模式；"><a href="#此时-将同时支持授权码模式和密码模式；" class="headerlink" title="此时 将同时支持授权码模式和密码模式；"></a>此时 将同时支持授权码模式和密码模式；</h3><h3 id="授权码模式和密码模式-的区别在于-：密码模式需要获取授权码，通过密码登录-直接获取token-，密码模式-用的你的-登录密码（WebSecurityConfig配置的密码），不是你的认证密码；"><a href="#授权码模式和密码模式-的区别在于-：密码模式需要获取授权码，通过密码登录-直接获取token-，密码模式-用的你的-登录密码（WebSecurityConfig配置的密码），不是你的认证密码；" class="headerlink" title="授权码模式和密码模式 的区别在于 ：密码模式需要获取授权码，通过密码登录 直接获取token   ，密码模式 用的你的 登录密码（WebSecurityConfig配置的密码），不是你的认证密码；"></a>授权码模式和密码模式 的区别在于 ：密码模式需要获取授权码，通过密码登录 直接获取token   ，密码模式 用的你的 登录密码（WebSecurityConfig配置的密码），不是你的认证密码；</h3><p>需要修改的两个类整个代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                .withClient(<span class="string">&quot;gsy&quot;</span>)<span class="comment">//配置client_id</span></span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;gsy123456&quot;</span>))<span class="comment">//配置client_secret</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">7200</span>)<span class="comment">//配置访问token的有效期</span></span><br><span class="line">                .refreshTokenValiditySeconds(<span class="number">25600</span>)<span class="comment">//配置刷新token的有效期</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.baidu.com&quot;</span>)<span class="comment">//配置redirect_uri，用于授权成功后跳转</span></span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)<span class="comment">//配置申请的权限范围</span></span><br><span class="line">                .autoApprove(<span class="keyword">true</span>)  <span class="comment">//自动批准</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>,<span class="string">&quot;password&quot;</span>);<span class="comment">//配置grant_type，表示授权类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用密码模式需要配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">        endpoints.authenticationManager(authenticationManager);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf()</span><br><span class="line">                .disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password( <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;guo&quot;</span>)</span><br><span class="line">                .password( <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="资源服务器不变"><a href="#资源服务器不变" class="headerlink" title="资源服务器不变"></a>资源服务器不变</h3><h2 id="测试-：案例"><a href="#测试-：案例" class="headerlink" title="测试 ：案例"></a>测试 ：案例</h2><p><img src="/2021/06/01/aouth2-pass/img_20210601213142.png"></p><p><img src="/2021/06/01/aouth2-pass/img_20210601213220.png"></p><h3 id="可以看见-access-token-的获取，后续拿着-access-token-去过去资源操作是一样的。"><a href="#可以看见-access-token-的获取，后续拿着-access-token-去过去资源操作是一样的。" class="headerlink" title="可以看见 access_token 的获取，后续拿着 access_token 去过去资源操作是一样的。"></a>可以看见 access_token 的获取，后续拿着 access_token 去过去资源操作是一样的。</h3><h2 id="备注-：如何在获取access-token同时获取-refresh-token"><a href="#备注-：如何在获取access-token同时获取-refresh-token" class="headerlink" title="备注 ：如何在获取access_token同时获取 refresh_token"></a>备注 ：如何在获取access_token同时获取 refresh_token</h2><h3 id="只需要在-AuthorizationServer授权服务器中添加-authorizedGrantTypes-添加-refresh-token-，其他不变"><a href="#只需要在-AuthorizationServer授权服务器中添加-authorizedGrantTypes-添加-refresh-token-，其他不变" class="headerlink" title="只需要在 AuthorizationServer授权服务器中添加  authorizedGrantTypes 添加 refresh_token  ，其他不变"></a>只需要在 AuthorizationServer授权服务器中添加  authorizedGrantTypes 添加 refresh_token  ，其他不变</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      clients.inMemory()</span><br><span class="line">              .withClient(<span class="string">&quot;gsy&quot;</span>)<span class="comment">//配置client_id</span></span><br><span class="line">              .secret(passwordEncoder.encode(<span class="string">&quot;gsy123456&quot;</span>))<span class="comment">//配置client_secret</span></span><br><span class="line">              .accessTokenValiditySeconds(<span class="number">7200</span>)<span class="comment">//配置访问token的有效期</span></span><br><span class="line">              .refreshTokenValiditySeconds(<span class="number">25600</span>)<span class="comment">//配置刷新token的有效期</span></span><br><span class="line">              .redirectUris(<span class="string">&quot;http://www.baidu.com&quot;</span>)<span class="comment">//配置redirect_uri，用于授权成功后跳转</span></span><br><span class="line">              .scopes(<span class="string">&quot;all&quot;</span>)<span class="comment">//配置申请的权限范围</span></span><br><span class="line">              .autoApprove(<span class="keyword">true</span>)  <span class="comment">//自动批准</span></span><br><span class="line">              .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>,<span class="string">&quot;password&quot;</span>,<span class="string">&quot;refresh_token&quot;</span>);<span class="comment">//配置grant_type，表示授权类型</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="测试可得："><a href="#测试可得：" class="headerlink" title="测试可得："></a>测试可得：</h3><p><img src="/2021/06/01/aouth2-pass/img_20210601213806.png"></p><h3 id="多一个-refresh-token-的参数"><a href="#多一个-refresh-token-的参数" class="headerlink" title="多一个 refresh_token 的参数"></a>多一个 refresh_token 的参数</h3><h4 id="至于-通过-refresh-token-可以刷新-access-token-之前的-access-token-会失效的写法，我会在下一篇中更新："><a href="#至于-通过-refresh-token-可以刷新-access-token-之前的-access-token-会失效的写法，我会在下一篇中更新：" class="headerlink" title="至于 通过 refresh_token 可以刷新 access_token 之前的 access_token 会失效的写法，我会在下一篇中更新："></a>至于 <strong>通过 refresh_token 可以刷新 access_token 之前的 access_token 会失效</strong>的写法，我会在下一篇中更新：</h4><hr><h2 id="oauth2-相关笔记-：-gitee-地址-：https-gitee-com-guo-shangyu-learning"><a href="#oauth2-相关笔记-：-gitee-地址-：https-gitee-com-guo-shangyu-learning" class="headerlink" title="oauth2 相关笔记  ： gitee 地址 ：https://gitee.com/guo-shangyu/learning"></a>oauth2 相关笔记  ： gitee 地址 ：<strong><a href="https://gitee.com/guo-shangyu/learning">https://gitee.com/guo-shangyu/learning</a></strong></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前一章中我门介绍了-oauth2-的授权的码的登录模式，现在我们来介绍一下-（密码模式）&quot;&gt;&lt;a href=&quot;#1-前一章中我门介绍了-oauth2-的授权的码的登录模式，现在我们来介绍一下-（密码模式）&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud Security 结合 oauth2的基本使用方法</title>
    <link href="http://example.com/2021/05/31/oauth2/"/>
    <id>http://example.com/2021/05/31/oauth2/</id>
    <published>2021-05-31T15:09:16.902Z</published>
    <updated>2021-08-25T14:19:37.331Z</updated>
    
    <content type="html"><![CDATA[<h3 id="oauth2的简介"><a href="#oauth2的简介" class="headerlink" title="oauth2的简介"></a>oauth2的简介</h3><h4 id="简介-：OAuth-2-0是用于授权的行业标准协议。OAuth-2-0为简化客户端开发提供了特定的授权流，包括Web应用、桌面应用、移动端应用等。"><a href="#简介-：OAuth-2-0是用于授权的行业标准协议。OAuth-2-0为简化客户端开发提供了特定的授权流，包括Web应用、桌面应用、移动端应用等。" class="headerlink" title="简介 ：OAuth 2.0是用于授权的行业标准协议。OAuth 2.0为简化客户端开发提供了特定的授权流，包括Web应用、桌面应用、移动端应用等。"></a>简介 ：OAuth 2.0是用于授权的行业标准协议。OAuth 2.0为简化客户端开发提供了特定的授权流，包括Web应用、桌面应用、移动端应用等。</h4><h4 id="OAuth-2-0中的四种模式-：授权码模式-简化模式-密码模式-客户端模式"><a href="#OAuth-2-0中的四种模式-：授权码模式-简化模式-密码模式-客户端模式" class="headerlink" title="OAuth 2.0中的四种模式 ：授权码模式  简化模式  密码模式  客户端模式"></a>OAuth 2.0中的四种模式 ：授权码模式  简化模式  密码模式  客户端模式</h4><h3 id="开启案例-："><a href="#开启案例-：" class="headerlink" title="开启案例 ："></a>开启案例 ：</h3><h4 id="我们采取的是springboot-的工程的搭建-（授权码模式）："><a href="#我们采取的是springboot-的工程的搭建-（授权码模式）：" class="headerlink" title="我们采取的是springboot 的工程的搭建 （授权码模式）："></a>我们采取的是springboot 的工程的搭建 （授权码模式）：</h4><h4 id="1-选择我们需要的模块"><a href="#1-选择我们需要的模块" class="headerlink" title="1.选择我们需要的模块"></a>1.选择我们需要的模块</h4><h5 id><a href="#" class="headerlink" title></a><img src="/2021/05/31/oauth2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210531211551.png"></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure><h4 id="2-配置application-yml"><a href="#2-配置application-yml" class="headerlink" title="2.配置application.yml"></a>2.配置application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure><h4 id="3-首先我们配置SecurityConfig"><a href="#3-首先我们配置SecurityConfig" class="headerlink" title="3.首先我们配置SecurityConfig"></a>3.首先我们配置SecurityConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于对用户名字的密码加密</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf()</span><br><span class="line">                .disable()    <span class="comment">//关闭csrf</span></span><br><span class="line">                .authorizeRequests()  <span class="comment">//开启认证</span></span><br><span class="line">                .anyRequest()     <span class="comment">//任何请求</span></span><br><span class="line">                .authenticated()    <span class="comment">//任何请求都需要认证才可以访问</span></span><br><span class="line">                .and()             </span><br><span class="line">                .formLogin()        <span class="comment">//允许表单登录</span></span><br><span class="line">                .permitAll();        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        auth.inMemoryAuthentication()    <span class="comment">//用来存用户名，这里是基本内存的存法  </span></span><br><span class="line">                .withUser(<span class="string">&quot;admin&quot;</span>)    <span class="comment">//用户名</span></span><br><span class="line">                .password( <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>)) <span class="comment">//密码</span></span><br><span class="line">                .roles(<span class="string">&quot;user&quot;</span>)   <span class="comment">//角色</span></span><br><span class="line">                .and()           <span class="comment">//配置多个</span></span><br><span class="line">                .withUser(<span class="string">&quot;guo&quot;</span>)   </span><br><span class="line">                .password( <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="4配置-授权服务器"><a href="#4配置-授权服务器" class="headerlink" title="4配置 授权服务器"></a>4配置 <strong>授权服务器</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAuthorizationServer</span>   <span class="comment">//开启资源认证</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.inMemory()   <span class="comment">//基于内存</span></span><br><span class="line">                .withClient(<span class="string">&quot;gsy&quot;</span>)<span class="comment">//配置client_id</span></span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;gsy123456&quot;</span>))<span class="comment">//配置client_secret</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">7200</span>)<span class="comment">//配置访问token的有效期</span></span><br><span class="line">                .refreshTokenValiditySeconds(<span class="number">25600</span>)<span class="comment">//配置刷新token的有效期</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.baidu.com&quot;</span>)<span class="comment">//配置redirect_uri，用于授权成功后跳转</span></span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)<span class="comment">//配置申请的权限范围</span></span><br><span class="line">                .autoApprove(<span class="keyword">true</span>)  <span class="comment">//自动批准</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>);<span class="comment">//配置grant_type，表示授权类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4配置-资源服务器"><a href="#4配置-资源服务器" class="headerlink" title="4配置 资源服务器"></a>4配置 资源服务器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests()  </span><br><span class="line">                .anyRequest()     </span><br><span class="line">                .authenticated()    </span><br><span class="line">                .and()</span><br><span class="line">                .requestMatchers()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>).and();<span class="comment">//配置需要保护的资源路径</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5配置-测试controller"><a href="#5配置-测试controller" class="headerlink" title="5配置 测试controller"></a>5配置 测试controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/getCurrentUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">(String code, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;asdaqsdad&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-开启测试-（开启项目）"><a href="#6-开启测试-（开启项目）" class="headerlink" title="6 开启测试   （开启项目）"></a>6 开启测试   （开启项目）</h4><p>首先在浏览器上进行访问  ：<a href="http://localhost:9001/oauth/authorize?response_type=code&amp;client_id=gsy&amp;redirect_uri=http://www.baidu.com&amp;scope=all&amp;state=normal">http://localhost:9001/oauth/authorize?response_type=code&amp;client_id=gsy&amp;redirect_uri=http://www.baidu.com&amp;scope=all&amp;state=normal</a></p><p>分析 ：</p><p><a href="http://localhost:9001/oauth/authorize">http://localhost:9001/oauth/authorize</a>   地址固定</p><p>response_type=code  表示授权码模式 </p><p>client_id，  redirect_uri 的参数   要和  <strong>授权服务器</strong>中的配置的要一样</p><p>访问地址得到 ：</p><p><img src="/2021/05/31/oauth2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210531221649.png"></p><p>用户名 /密码为 SecurityConfig配置的 admin/123 或者  guo/123  点击提交，会跳转到百度 <strong>redirect_uri</strong>参数控制的。</p><h4 id="-1"><a href="#-1" class="headerlink" title></a><img src="/2021/05/31/oauth2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210531220719.png"></h4><p>获取code 然后 通过 postman工具 来获取  access_token</p><p><img src="/2021/05/31/oauth2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210531221010.png"></p><p><img src="/2021/05/31/oauth2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210531221058.png"></p><p>使用basic认证  填写上  <strong>授权服务器</strong>里面定位用户与密码</p><p>然后使用post 请求  添加一下参数  code参数为浏览器中获取得  code只可以用一次 ，点击请求 </p><p><img src="/2021/05/31/oauth2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210531222008.png"></p><p>获取到  access_token  就可以去访问  测试controller</p><p><img src="/2021/05/31/oauth2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210531222227.png"></p><p>配置 access_token  参数 访问  </p><p><img src="/2021/05/31/oauth2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210531222434.png"></p><p>不配置会报错 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;unauthorized&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;error_description&quot;</span>: <span class="string">&quot;Full authentication is required to access this resource&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-至此一个简单的oauth2的测试已经结束-，下一章更新-第二种模式-（密码模式）认证，以及-refresh-token-的作用"><a href="#7-至此一个简单的oauth2的测试已经结束-，下一章更新-第二种模式-（密码模式）认证，以及-refresh-token-的作用" class="headerlink" title="7.至此一个简单的oauth2的测试已经结束 ，下一章更新  第二种模式 （密码模式）认证，以及  refresh_token 的作用"></a>7.至此一个简单的oauth2的测试已经结束 ，下一章更新  第二种模式 （密码模式）认证，以及  refresh_token 的作用</h4><hr><h2 id="oauth2-相关笔记-：-gitee-地址-：https-gitee-com-guo-shangyu-learning"><a href="#oauth2-相关笔记-：-gitee-地址-：https-gitee-com-guo-shangyu-learning" class="headerlink" title="oauth2 相关笔记  ： gitee 地址 ：https://gitee.com/guo-shangyu/learning"></a>oauth2 相关笔记  ： gitee 地址 ：<strong><a href="https://gitee.com/guo-shangyu/learning">https://gitee.com/guo-shangyu/learning</a></strong></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;oauth2的简介&quot;&gt;&lt;a href=&quot;#oauth2的简介&quot; class=&quot;headerlink&quot; title=&quot;oauth2的简介&quot;&gt;&lt;/a&gt;oauth2的简介&lt;/h3&gt;&lt;h4 id=&quot;简介-：OAuth-2-0是用于授权的行业标准协议。OAuth-2-0为简</summary>
      
    
    
    
    
  </entry>
  
</feed>
